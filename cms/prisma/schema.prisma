generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Page {
  id        String   @id @default(uuid())
  pathname  String
  name      String
  concept     Boolean  @default(true)
  createdBy    String
  updatedBy    String
  blocks    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seo       SEO?     @relation("PageToSEO")
  backups      BlockBackup[]
}

model SEO {
  id             String   @id @default(uuid())
  pageId         String   @unique
  title          String?
  description    String?  @db.Text
  keywords       String?
  ogTitle        String?
  ogDescription  String?
  mediaId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  page           Page     @relation("PageToSEO", fields: [pageId], references: [id])
  media           Media?     @relation("MediaToSEO", fields: [mediaId], references: [id])

  @@index([mediaId])
}

model Media {
  id        String   @id @default(uuid())
  filename  String
  size      Int
  width     Int
  height    Int
  mimetype  String
  filepath  String
  url       String   @unique
  createdAt DateTime @default(now())
  seo       SEO[]     @relation("MediaToSEO")
  header       Header[]     @relation("MediaToHeader")
  settings      Settings[] @relation("MediaToSettings")
  courses      Course[] @relation("MediaToCourses")
  teachers      Teacher[] @relation("MediaToTeachers")
  products      Product[] @relation("MediaToProducts")
  libraries      Library[] @relation("MediaToLibrary")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  size      Int
  height      Int
  width      Int
  mimetype  String
  filepath  String
  url       String   @unique
  createdAt DateTime @default(now())

  contactEmail ContactEmail? @relation("FileToContactEmail")
}

model ContactEmail {
  id        String   @id @default(uuid())
  firstName  String?
  lastName  String?
  phoneNumber  String?
  email  String?
  message  String?  @db.Text
  createdAt DateTime @default(now())
  fileId         String? @unique
  file         File?     @relation("FileToContactEmail", fields: [fileId], references: [id])

  @@index([fileId])
}

model Session {
  id            String    @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  password      String
  name          String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  roles     Role[] @relation("UserRoles")
  libraries     Library[] @relation("UserLibraries")
}

model Header {
  id        String   @id @default(uuid())
  navigation   Json @default("[]")
  links   Json @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  mediaId         String?
  media         Media?     @relation("MediaToHeader", fields: [mediaId], references: [id])

  @@index([mediaId])
}

model Footer {
  id        String   @id @default(uuid())
  title        String  @db.Text
  navigation   Json @default("[]")
  links   Json @default("[]")
  socials   Json @default("[]")
  informationLinks   Json @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Contact {
  id        String   @id @default(uuid())
  title        String
  fields   Json
  information   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model BlockBackup {
  id            String    @id @default(cuid())
  blocks    Json
  pageId         String
  createdAt DateTime @default(now())
  page         Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  @@index([pageId])

}

model Role {
  id            String    @id @default(cuid())
  name        String       @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")
}

model Permission {
  id            String    @id @default(cuid())
  type      String
  entity    String
  action    String
  roles     Role[] @relation("RolePermissions")
  
  @@unique([entity, action])
}

model VerificationToken {
  id            String    @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id        String   @id @default(uuid())
  name      String   @default("")
  email      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mediaId         String?
  media         Media?     @relation("MediaToSettings", fields: [mediaId], references: [id])

  @@index([mediaId])
}

model Course {
  id             String   @id @default(uuid())
  title          String
  description          String
  mediaId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  media           Media?     @relation("MediaToCourses", fields: [mediaId], references: [id])
  teachers Teacher[] @relation("TeacherCourses")

  @@index([mediaId])
}

model Teacher {
  id             String   @id @default(uuid())
  title          String
  name          String
  description    String  @db.Text
  mediaId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  media           Media?     @relation("MediaToTeachers", fields: [mediaId], references: [id])
  courses Course[] @relation("TeacherCourses")

  @@index([mediaId])
}

model Product {
  id             String   @id @default(uuid())
  slug          String
  title          String
  price           Float
  stock           Int
  mediaId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  media           Media?     @relation("MediaToProducts", fields: [mediaId], references: [id])

  relatedProducts Product[] @relation("ProductToRelatedProducts")
  relatingProducts Product[] @relation("ProductToRelatedProducts")

  @@index([mediaId])
}

enum LibraryType {
  PODCAST
  ONLINE_MASTERCLASS
  WHITEPAPER
}

model Library {
  id             String   @id @default(uuid())
  slug          String
  title          String
  type           LibraryType
  mediaId        String?
  userId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  media           Media?     @relation("MediaToLibrary", fields: [mediaId], references: [id])
  user           User?     @relation("UserLibraries", fields: [userId], references: [id])

  relatedLibraries Library[] @relation("LibraryToRelatedLibraries")
  relatingLibraries Library[] @relation("LibraryToRelatedLibraries")

  @@index([mediaId])
  @@index([userId])
}